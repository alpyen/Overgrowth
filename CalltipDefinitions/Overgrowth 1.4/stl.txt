// StdString

// Note that string is not a real class and has no specific constructor or supports object handles.
class string {
	string opAssign(const string&in);
	string opAssign(double);
	string opAssign(float);
	string opAssign(int64);
	string opAssign(uint64);
	string opAssign(bool);
	string opAssign(vec3);

	string opAdd(const string&in) const;
	string opAdd(double) const;
	string opAdd(float) const;
	string opAdd(int64) const;
	string opAdd(uint64) const;
	string opAdd(bool) const;
	string opAdd(vec3) const;

	string opAdd_r(double) const;
	string opAdd_r(float) const;
	string opAdd_r(int64) const;
	string opAdd_r(uint64) const;
	string opAdd_r(bool) const;
	string opAdd_r(vec3) const;

	string opAddAssign(const string&in);
	string opAddAssign(double);
	string opAddAssign(float);
	string opAddAssign(int64);
	string opAddAssign(uint64);
	string opAddAssign(bool);
	string opAddAssign(vec3);

	bool opEquals(const string&in) const;

	int opCmp(const &in) const;
	
	uint8& opIndex(uint);
	const uint8& opIndex(uint) const;
	
	uint length() const;
	void resize(uint) const;
	bool isEmpty() const;

	string substr(uint start = 0, int count = -1) const;

	void insert(uint pos, const string &in other);
	void erase(uint pos, int count = -1);

	string[]@ split(const string&in) const; // enabled from StdStringUtils (also requires ScriptArray)

	int findFirst(const string &in str, uint start = 0) const;
	int findLast(const string &in str, int start = -1) const;

	int findFirstOf(const string &in chars, int start = 0) const;
	int findFirstNotOf(const string &in chars, int start = 0) const;
	int findLastOf(const string &in chars, int start = -1) const;
	int findLastNotOf(const string &in chars, int start = -1) const; // bugged in OG1.4 AS2.32.0, was fixed in AS2.33.0
};

// Functions

int64 parseInt(const string &in str, uint base = 10, uint &out byteCount = 0);
uint64 parseUInt(const string &in str, uint base = 10, uint &out byteCount = 0);

double parseFloat(const string &in, uint &out byteCount = 0);

string formatInt(int64 val, const string &in options = '', uint width = 0);
string formatUInt(uint64 val, const string &in options = '', uint width = 0);
string formatFloat(double val, const string &in options = '', uint width = 0, uint precision = 0);

// ========================================
// ScriptArray

class array<T> {
	void f();
	void f(uint length);
	void f(uint length, const T&in value);

	T[]& opAssign(const T[]&in)

	T& opIndex(uint index);
	const T& opIndex(uint index) const;

	bool opEquals(const T[]&in) const;
	
	uint length() const;
	void resize(uint);
	void reverse();

	void insertAt(uint index, const T& in value);
	void insertAt(uint index, const array<T>& arr);

	void insertLast(const T& in);

	void removeAt(uint index);

	void removeLast();

	void removeRange(uint start, uint count);

	void sortAsc();
	void sortAsc(uint startAt, uint count);

	void sortDesc();
	void sortDesc(uint startAt, uint count);

	void sort(const less &in compareFunc, uint startAt = 0, uint count = uint(-1));

	int find(const T& in);
	int find(uint startAt, const T& in);

	int findByRef(const T& in);
	int findByRef(uint startAt, const T& in);
};


// ========================================
// StdStringUtils

// the split method was added to the class at StdString further above
string join(const string[]&in, const string&in);


// ========================================
// ScriptDictionary

class dictionary {
	void f();

	dictionary& opAssign(const dictionary&in);

	dictionaryValue& opIndex(const string &in);
	const dictionaryValue& opIndex(const string&in) const;

	void set(const string &in key, ? &in value);
	void set(const string &in key, int64 &in value);
	void set(const string &in key, double &in value);

	bool get(const string &in key, ? &out value) const;
	bool get(const string &in key, int64 &out value) const;
	bool get(const string &in key, double &out value) const;
};

class dictionaryValue {
	void f();
	
	dictionaryValue& opAssign(const dictionaryValue&in);
	dictionaryValue& opAssign(const ?&in);
	dictionaryValue& opAssign(double);
	dictionaryValue& opAssign(int64);
	
	double& opConv();
	int64 opConv();
	void opCast(?&out);
	
	array<string> @getKeys() const;

	bool exists(const string &in key) const;
	bool delete(const string &in key);
	void deleteAll();
	bool isEmpty() const;
	uint getSize() const;
};


