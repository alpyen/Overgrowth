// ----- VARIABLES -----

uint UINT32MAX;


float time_step; // Time in seconds between engine time steps
float the_time; // The current time in seconds since engine started (in-game time)
float ui_time; // The current time in seconds since engine started (absolute time)


const int _sound_priority_max;
const int _sound_priority_very_high;
const int _sound_priority_high;
const int _sound_priority_med;
const int _sound_priority_low;


const int _delete_on_update;
const int _fade;
const int _delete_on_draw;
const int _persistent;


ASContext context;


float last_keyboard_event_time;
float last_mouse_event_time;
float last_controller_event_time;


SaveFile save_file;




// ----- ENUMS -----

enum LogType {
    fatal = 32,
    error = 16,
    warning = 8,
    info = 4,
    debug = 2,
    spam = 1
};


enum JsonValueType {
    JSONnullValue = 0,
    JSONintValue = 1,
    JSONuintValue = 2,
    JSONrealValue = 3,
    JSONstringValue = 4,
    JSONbooleanValue = 5,
    JSONarrayValue = 6,
    JSONobjectValue = 7
};


enum UserVote {
    k_VoteUnknown = 0,
    k_VoteNone = 1,
    k_VoteUp = 2,
    k_VoteDown = 3
};


enum KeyboardInputModeFlag {
    KIMF_NO = 0,
    KIMF_MENU = 1,
    KIMF_PLAYING = 2,
    KIMF_LEVEL_EDITOR_GENERAL = 4,
    KIMF_LEVEL_EDITOR_DIALOGUE_EDITOR = 8,
    KIMF_GUI_GENERAL = 16,
    KIMF_ANY = 268435455
};

enum SDLNumeric {
    K_ESCAPE = 27,
    K_ENTER = 13,
    KP_ENTER = 1073741912,
    K_BACKSPACE = 8,
    K_TAB = 9,
    K_0 = 48,
    K_1 = 49,
    K_2 = 50,
    K_3 = 51,
    K_4 = 52,
    K_5 = 53,
    K_6 = 54,
    K_7 = 55,
    K_8 = 56,
    K_9 = 57,
    KP_0 = 1073741922,
    KP_1 = 1073741913,
    KP_2 = 1073741914,
    KP_3 = 1073741915,
    KP_4 = 1073741916,
    KP_5 = 1073741917,
    KP_6 = 1073741918,
    KP_7 = 1073741919,
    KP_8 = 1073741920,
    KP_9 = 1073741921
};


enum MouseButton {
    LEFT = 0,
    MIDDLE = 1,
    RIGHT = 2,
    FOURTH = 3,
    FIFTH = 4,
    SIXTH = 5,
    SEVENTH = 6,
    EIGHT = 7,
    NINTH = 8,
    TENTH = 9,
    TWELFTH = 10
};


enum ControllerInput {
    A = 0,
    B = 1,
    X = 2,
    Y = 3,
    D_UP = 4,
    D_RIGHT = 5,
    D_DOWN = 6,
    D_LEFT = 7,
    START = 8,
    BACK = 9,
    GUIDE = 10,
    L_STICK_PRESSED = 11,
    R_STICK_PRESSED = 12,
    LB = 13,
    RB = 14,
    L_STICK_XN = 22,
    L_STICK_XP = 23,
    L_STICK_YN = 24,
    L_STICK_YP = 25,
    R_STICK_XN = 26,
    R_STICK_XP = 27,
    R_STICK_YN = 28,
    R_STICK_YP = 29,
    L_TRIGGER = 19,
    R_TRIGGER = 20
};


enum EngineState {
    kEngineNoState = 0,
    kEngineLevelState = 1,
    kEngineEditorLevelState = 2,
    kEngineEngineScriptableUIState = 3,
    kEngineCampaignState = 4
};


enum SplitScreenMode {
    kModeNone = 0,
    kModeFull = 1,
    kModeSplit = 2
};





// ----- FUNCTIONS -----
//Mandatory functions in script
void Update()
void Dispose()
void EnterCampaign()
void EnterLevel()
void LeaveCampaign()
void LeaveLevel()



//Optional functions in script
void Init()
void ReceiveMessage(string)
void SetWindowDimensions(int width, int height)



//Interface
// These two are methods from generic arrays. You can find them in stl.txt
//void push_back(const T&in);
//uint size() const;
void StartStopwatch();
uint64 StopAndReportStopwatch();
void EnterTelemetryZone(const string& in name);
void LeaveTelemetryZone();


float fpFromIEEE(uint);
uint fpToIEEE(float);
double fpFromIEEE(uint64);
uint64 fpToIEEE(double);
float min(float,float);
float max(float,float);
int min(int,int);
int max(int,int);
float mix(float a,float b,float amount);
float cos(float);
float sin(float);
float tan(float);
float acos(float);
float asin(float);
float atan(float);
float atan2(float,float);
float log(float);
float log10(float);
float pow(float val, float exponent);
float sqrt(float);
int rand();
float RangedRandomFloat(float min, float max);
float ceil(float);
float abs(float);
float floor(float);


float length(const vec2 &in);
float length_squared(const vec2 &in);
float dot(const vec2 &in, const vec2 &in);
float distance(const vec2 &in, const vec2 &in);
float distance_squared(const vec2 &in, const vec2 &in);
vec2 normalize(const vec2 &in);
vec2 reflect(const vec2 &in vec, const vec2 &in normal);
vec2 mix(vec2 a,vec2 b,float alpha);


float length(const vec3 &in);
float length_squared(const vec3 &in);
float dot(const vec3 &in, const vec3 &in);
float distance(const vec3 &in, const vec3 &in);
float distance_squared(const vec3 &in, const vec3 &in);
float xz_distance(const vec3 &in, const vec3 &in);
float xz_distance_squared(const vec3 &in, const vec3 &in);
vec3 normalize(const vec3 &in);
vec3 cross(const vec3 &in, const vec3 &in);
vec3 reflect(const vec3 &in vec, const vec3 &in normal);
vec3 mix(vec3 a,vec3 b,float alpha);


vec4 mix(vec4 a,vec4 b,float alpha);


vec3 Mult(quaternion, vec3); // Applies a quaternion rotation to a vector
quaternion mix(const quaternion &in a, const quaternion &in b, float alpha);
quaternion invert(quaternion quat);
void GetRotationBetweenVectors(const vec3 &in start, const vec3 &in end, quaternion &out rotation);


mat4 transpose(mat4);
mat4 invert(mat4);
mat4 mix(const mat4 &in a, const mat4 &in b, float alpha);


BoneTransform invert(const BoneTransform &in);
BoneTransform mix(const BoneTransform &in a, const BoneTransform &in b, float alpha);
mat4 Mat4FromQuaternion(const quaternion &in);
mat3 Mat3FromQuaternion(const quaternion &in);
quaternion QuaternionFromMat4(const mat4 &in);


void TimedSlowMotion(float target_time_scale, float how_long, float delay); // Used to trigger brief periods of slow motion
uint64 GetPerformanceCounter(); // Get high precision time info for profiling
uint64 GetPerformanceFrequency(); // Used to convert PerformanceCounter into seconds
bool GetMenuPaused(); // Is game paused by a menu
void UpdateListener(vec3 pos, vec3 vel, vec3 facing, vec3 up);
int PlaySound(string path);
int PlaySoundLoop(const string &in path, float gain);
int PlaySoundLoopAtLocation(const string &in path, vec3 pos, float gain);
void SetSoundGain(int handle, float gain);
void SetSoundPitch(int handle, float pitch);
void SetSoundPosition(int handle, vec3 pos);
void StopSound(int handle);
int PlaySound(string path, vec3 position);
int PlaySoundGroup(string path);
int PlaySoundGroup(string path, float gain);
int PlaySoundGroup(string path, vec3 position);
int PlaySoundGroup(string path, vec3 position, float gain);
int PlaySoundGroup(string path, vec3 position, int priority);
void SetAirWhoosh(float volume, float pitch);


bool AddMusic(const string& in);
bool RemoveMusic(const string& in);
void PlaySong(const string& in);
void SetSong(const string& in);
string GetSong();
void SetSegment(const string& in);
void QueueSegment(const string& in);
void PlaySegment(const string& in);
string GetSegment();
array<string>@ GetLayerNames();
void SetLayerGain(const string &in layer, float gain);
float GetLayerGain(const string &in layer);
void ReloadMods();
void ConnectParticles(uint32 id_a, uint32 id_b); // Used for ribbon particles, like throat-cut blood
uint32 MakeParticle(string path, vec3 pos, vec3 vel);
uint32 MakeParticle(string path, vec3 pos, vec3 vel, vec3 color);
void TintParticle(uint32 id, const vec3 &in color);
void SetSunPosition(vec3);
void SetSunColor(vec3);
void SetSunAmbient(float);
vec3 GetSunPosition();
vec3 GetSunColor();
float GetSunAmbient();
void SetFlareDiffuse(float);
void SetSkyTint(vec3);
vec3 GetSkyTint();
vec3 GetBaseSkyTint();
void SetHDRWhitePoint(float);
void SetHDRBlackPoint(float);
void SetHDRBloomMult(float);
float GetHDRWhitePoint(void);
float GetHDRBlackPoint(void);
float GetHDRBloomMult(void);


int DebugDrawLine(vec3 start, vec3 end, vec3 color, int lifespan);
int DebugDrawBillboard(const string &in path, vec3 center, float scale, vec4 color, int lifespan);
int DebugDrawLine(vec3 start, vec3 end, vec3 start_color, vec3 end_color, int lifespan);
int DebugDrawLine(vec3 start, vec3 end, vec4 start_color, vec4 end_color, int lifespan);
int DebugDrawRibbon(vec3 start, vec3 end, vec4 start_color, vec4 end_color, float start_width, float end_width, int lifespan);
int DebugDrawRibbon(int lifespan);
void AddDebugDrawRibbonPoint(int which, vec3 pos, vec4 color, float width);
int DebugDrawLines(const array<vec3> &vertices, vec4 color, int lifespan);
int DebugDrawText(vec3 pos, string text, float scale, bool screen_space, int lifespan);
int DebugSetPosition(int id, vec3 pos);
int DebugDrawWireSphere(vec3 pos, float radius, vec3 color, int lifespan);
int DebugDrawWireMesh(string path, mat4 transform, vec4 color, int lifespan);
int DebugDrawWireScaledSphere(vec3 pos, float radius, vec3 scale, vec3 color, int lifespan);
int DebugDrawWireScaledSphere(vec3 pos, float radius, vec3 scale, vec4 color, int lifespan);
int DebugDrawWireCylinder(vec3 pos, float radius, float height, vec3 color, int lifespan);
int DebugDrawWireBox(vec3 pos, vec3 dimensions, vec3 color, int lifespan);
int DebugDrawCircle(mat4 transform, vec4 color, int lifespan);
void DebugDrawRemove(int id);
void DebugText(string key, string display_text, float lifetime);
string FloatString(float val, int digits);
int DebugDrawPoint(vec3 pos, vec4 color, int lifespan);
void ClearTemporaryDecals(); // Like blood splats and footprints
void DisplayError(const string &in title, const string &in contents);


void Log( LogType level, const string &in str );
string GetBuildVersionShort( );
string GetBuildVersionFull( );
string GetBuildTimestamp( );


string GetConfigValueString(string index);
array<string>@ GetConfigValueOptions(string index);
float GetConfigValueFloat(string index);
void SetConfigValueFloat(string key, float value);
bool GetConfigValueBool(string index);
void SetConfigValueString(string key, string value);
void SetConfigValueBool(string key, bool value);
void SetConfigValueInt(string key, int value);
int GetConfigValueInt(string key);
int GetMonitorCount();
array<vec2>@ GetPossibleResolutions();
void ReloadStaticValues();
array<string>@ GetAvailableBindingCategories();
array<string>@ GetAvailableBindings(const string& in);
string GetBindingValue(string binding_category, string binding);
void SetBindingValue(string binding_category, string binding, string value);
void SetKeyboardBindingValue(string binding_category, string binding, uint32 scancode);
void SetMouseBindingValue(string binding_category, string binding, uint32 button);
void SetMouseBindingValue(string binding_category, string binding, string text);
void SetControllerBindingValue(string binding_category, string binding, uint32 input);
void SaveConfig();
bool ConfigHasKey(string key);
void ResetBinding(string binding_category, string binding);
string ToUpper(string &in);
uint GetLengthInBytesForNCodepoints( const string& in, uint codepoint_index );
uint GetCodepointCount( const string& in );
bool DirectoryExists(string& in);
bool FileExists(string& in);


Campaign GetCampaign(string& campaign_id);
array<Campaign>@ GetCampaigns();
bool ModIsActive(ModID& id);
bool ModNeedsRestart(ModID& id);
bool ModIsValid(ModID& id);
bool ModIsCore(ModID& id);
bool ModCanActivate(ModID& id);
int ModGetSource(ModID& id);
string ModGetID(ModID& id);
string ModGetName(ModID& id);
string ModGetAuthor(ModID& id);
string ModGetVersion(ModID& id);
string ModGetTags(ModID& id);
string ModGetPath(ModID& sid);
string ModGetValidityString(ModID& sid);
string ModGetDescription(ModID& id);
string ModGetThumbnail(ModID& sid);
array<MenuItem>@ ModGetMenuItems(ModID& sid);
array<SpawnerItem>@ ModGetSpawnerItems(ModID& sid);
array<SpawnerItem>@ ModGetAllSpawnerItems(bool only_include_active = true);
array<ModLevel>@ ModGetCampaignLevels(ModID& sid);
array<ModLevel>@ ModGetSingleLevels(ModID& sid);
UserVote ModGetUserVote(ModID& sid);
void RequestModSetUserVote(ModID& id, bool voteup);
void RequestModSetFavorite(ModID& id, bool fav);
bool ModIsFavorite(ModID& id);
array<ModID>@ GetModSids();
array<ModID>@ GetActiveModSids();
bool ModActivation(ModID& sid, bool active);
void RequestWorkshopSubscribe(ModID& id);
void RequestWorkshopUnSubscribe(ModID& id);
bool IsWorkshopSubscribed(ModID& id);
bool IsWorkshopMod(ModID& id);
bool IsWorkshopAvailable();
void SaveModConfig();
void OpenModWorkshopPage(ModID& id);
void OpenModAuthorWorkshopPage(ModID& id);
void OpenWorkshop();
void DeactivateAllMods();
uint WorkshopSubscribedNotInstalledCount();
uint WorkshopDownloadingCount();
uint WorkshopDownloadPendingCount();
uint WorkshopNeedsUpdateCount();
float WorkshopTotalDownloadProgress();
void StorageSetString(string index, string value);
bool StorageHasString(string index);
string StorageGetString(string index);
void StorageSetInt32(string index, int value);
bool StorageHasInt32(string index);
int StorageGetInt32(string index);
void PrintCallstack();


void SendLevelMessage(const string& in msg);


bool GetInputDown(int controller_id, const string &in input_label);
bool GetInputDownFiltered(int controller_id, const string &in input_label, uint filter);
bool GetInputPressed(int controller_id, const string &in input_label);
bool GetInputPressedFiltered(int controller_id, const string &in input_label, uint filter);
void ActivateKeyboardEvents();
void DeactivateKeyboardEvents();
void StartTextInput();
void StopTextInput();
float GetLookXAxis(int controller_id);
float GetLookYAxis(int controller_id);
float GetMoveXAxis(int controller_id);
float GetMoveYAxis(int controller_id);
void SetGrabMouse(bool);
bool DebugKeysEnabled();
bool EditorEnabled();
void LoadEditorLevel();
bool IsKeyDown(int key_code);
int GetCodeForKey(string key_name);
string GetStringDescriptionForBinding( const string& in, const string& in );
string GetLocaleStringForScancode(int scancode);
string GetStringForMouseButton(int button);
string GetStringForControllerInput(int input);
string GetStringForMouseString(const string& text);


uint GetInputMode();


array<KeyboardPress>@ GetRawKeyboardInputs();


array<MousePress>@ GetRawMouseInputs();


array<ControllerPress>@ GetRawControllerInputs(int which);
bool IsControllerConnected();


void Breakpoint(int);
bool LoadFile(const string &in);
string GetFileLine();
void StartWriteFile();
void AddFileString(const string &in);
bool WriteFile(const string &in);
bool WriteFileKeepBackup(const string &in);
bool WriteFileToWriteDir(const string &in);
string GetLocalizedDialoguePath(const string &in);
void SetInterlevelData(const string &in, const string &in);
string GetInterlevelData(const string &in);


void LoadLevel(string level_path);
void LoadLevelID(string id);
void SetCampaignID(string id);
string GetCurrLevelAbsPath();
string GetCurrLevel();
string GetCurrLevelRelPath();
string GetLevelName(const string& path);
string GetCurrLevelName();
string GetCurrLevelID();
string GetCurrCampaignID();
string GetCurrentMenuModsourceID();
string GetCurrentLevelModsourceID();
bool EditorModeActive();
void assert(bool val);
void SetSplitScreenMode(SplitScreenMode mode);





// ----- CLASSES -----

class vec2 {
    float x;
    float y;
    void f();
    void f(const vec2 &in);
    void f(float, float);
    void f(float);
    vec2 &opAddAssign(const vec2 &in);
    vec2 &opSubAssign(const vec2 &in);
    vec2 &opMulAssign(float);
    vec2 &opDivAssign(float);
    bool opEquals(const vec2 &in) const;
    vec2 opAdd(const vec2 &in) const;
    vec2 opSub(const vec2 &in) const;
    vec2 opMul(float) const;
    vec2 opMul_r(float) const;
    vec2 opDiv(float) const;
};


class vec3 {
    float x;
    float y;
    float z;
    void f();
    void f(const vec3 &in);
    void f(float, float, float);
    void f(float);
    vec3 &opAddAssign(const vec3 &in);
    vec3 &opSubAssign(const vec3 &in);
    vec3 &opMulAssign(float);
    vec3 &opDivAssign(float);
    bool opEquals(const vec3 &in) const;
    vec3 opAdd(const vec3 &in) const;
    vec3 opSub(const vec3 &in) const;
    vec3 opMul(float) const;
    vec3 opMul(const vec3& in) const;
    vec3 opMul_r(float) const;
    vec3 opDiv(float) const;
    float &opIndex(int);
};


class vec4 {
    float x;
    float y;
    float z;
    float a;
    void f();
    void f(const vec4 &in);
    void f(float, float, float, float);
    void f(const vec3 &in, float);
    void f(float);
};


class ivec2 {
    int x;
    int y;
    void f();
    void f(const ivec2 &in);
    void f(int, int);
    void f(int);
    ivec2 &opAddAssign(const ivec2 &in);
    ivec2 &opSubAssign(const ivec2 &in);
    ivec2 &opMulAssign(int);
    ivec2 &opDivAssign(int);
    ivec2 opAdd(const ivec2 &in) const;
    ivec2 opSub(const ivec2 &in) const;
    ivec2 opMul(int) const;
    ivec2 opDiv(int) const;
};
class ivec3 {
    int x;
    int y;
    void f();
    void f(const ivec3 &in);
    void f(int, int, int);
    void f(int);
};
class ivec4 {
    int x;
    int y;
    void f();
    void f(const ivec4 &in);
    void f(int, int, int, int);
    void f(int);
};
class quaternion {
    float x;
    float y;
    float z;
    float w;
    void f();
    void f(const quaternion &in);
    void f(float, float, float, float);
    void f(vec4); // Axis-angle (axis.x, axis.y, axis.z, angle_radians)
    void f();
    quaternion &opAssign(const quaternion &in);
    quaternion &opAddAssign(const quaternion &in);
    bool opEquals(const quaternion &in) const;
    quaternion opAdd(const quaternion &in) const;
    quaternion opMul(const quaternion &in) const;
    vec3 opMul(const vec3 &in) const;
};


class mat4 {
    void f();
    void f(const mat4 &in);
    float &opIndex(uint);
    const float &opIndex(uint) const;
    mat4 opMul(mat4) const;
    vec3 opMul(vec3) const;
    vec3 opMul(vec4) const;
    void SetTranslationPart(vec3);
    vec3 GetTranslationPart() const;
    void SetRotationPart(mat4);
    mat4 GetRotationPart() const;
    void SetRotationX(float);
    void SetRotationY(float);
    void SetRotationZ(float);
    void SetColumn(int, vec3);
    vec3 GetColumn(int);
};


class mat3 {
    void f();
    void f(const mat3 &in);
    float &opIndex(uint);
    const float &opIndex(uint) const;
    vec3 opMul(const vec3 &in) const;
};
class BoneTransform { // An efficient way to define an unscaled transformation
    quaternion rotation;
    vec3 origin;
    void f();
    void f(const mat4 &in);
    void f(const BoneTransform &in);
    bool opEquals(const BoneTransform &in) const;
    BoneTransform opMul(const BoneTransform &in) const;
    BoneTransform opMul(const BoneTransform &in) const;
    vec3 opMul(const vec3 &in) const;
    mat4 GetMat4() const;
};


class JSONValue {
    void JSONValue();
    void JSONValue( JsonValueType &in );
    void JSONValue( int &in );
    void JSONValue( uint &in);
    void JSONValue( int64 &in);
    void JSONValue( uint64 &in );
    void JSONValue( double &in );
    void JSONValue( string &in );
    void JSONValue( bool &in );
    void JSONValue( JSONValue &in );
    void JSONValue();
    JSONValue& opAssign(const JSONValue &in other);
    JSONValue& opIndex( const string &in );
    JSONValue& opIndex( const int &in );
    string asString();
    JsonValueType type();
    string typeName();
    int asInt();
    uint asUInt();
    int64 asInt64();
    uint64 asUInt64();
    float asFloat();
    double asDouble();
    bool asBool();
    bool isNull();
    bool isBool();
    bool isInt();
    bool isInt64();
    bool isUInt();
    bool isUInt64();
    bool isIntegral();
    bool isDouble();
    bool isNumeric();
    bool isString();
    bool isArray();
    bool isObject();
    bool isConvertibleTo(JsonValueType type);
    uint size();
    bool empty();
    void clear();
    void resize(uint64);
    bool isValidIndex(uint64);
    JSONValue& append(const JSONValue &in);
    bool removeMember( const string &in );
    bool removeIndex( uint  i );
    bool isMember(const string &in);
    array<string>@ getMemberNames();
};


class JSON {
    void JSON();
    void JSON();
    JSON& opAssign(const JSON &in other);
    bool parseString(string &in);
    bool parseFile(string &in);
    string writeString(bool=false);
    JSONValue& getRoot();
};


class LevelDetails {
    void f();
    string GetName();
};


class Parameter {
    void f();
    void f(const Parameter &in other);
    void f();
    Parameter& opAssign(const Parameter &in other);
    Parameter opIndex( const string &in );
    Parameter opIndex( const int &in );
    string getName();
    bool isEmpty();
    bool isString();
    bool isArray();
    bool isTable();
    uint size();
    string asString();
    bool contains(const string &in value);
    bool containsName(const string &in value);
};


class ModID {
    void f();
    void f();
    bool Valid();
};
class MenuItem {
    void f();
    void f();
    string GetTitle();
    string GetCategory();
    string GetPath();
    string GetThumbnail();
};
class SpawnerItem {
    void SpawnerItem();
    void SpawnerItem();
    string GetTitle();
    string GetCategory();
    string GetPath();
    string GetThumbnail();
};
class ModLevel {
    void f();
    void f(const ModLevel &in other);
    void f();
    ModLevel& opAssign(const ModLevel &in other);
    string GetTitle();
    string GetID();
    string GetThumbnail();
    string GetPath();
    LevelDetails GetDetails();
    bool CompletionOptional();
    Parameter GetParameter();
};


class Campaign {
    void f();
    void f(const Campaign &in other);
    void f();
    Campaign& opAssign(const Campaign &in other);
    string GetID();
    string GetTitle();
    string GetThumbnail();
    string GetMainScript();
    string GetMenuScript();
    string GetAttribute(string &in id);
    array<ModLevel>@ GetLevels();
    ModLevel GetLevel(string &in id);
    Parameter GetParameter();
};


class ASContext {
    void PrintGlobalVars();
};


class LevelSetReader {
    LevelSetReader@ f(const string &in path);
    LevelSetReader@ f();
    void f();
    void f();
    bool Next(string &out str);
};
class LevelInfoReader {
    void f();
    void f();
    void Load(const string &in);
    const string& visible_name();
    const string& visible_description();
};


class KeyboardPress {
    uint16 s_id;
    uint32 keycode;
    uint32 scancode;
    uint16 mod;
};


class MousePress {
    uint16 s_id;
    MouseButton button;
};


class ControllerPress {
    uint32 s_id;
    ControllerInput input;
    float depth;
};


class TokenIterator {
    void Init();
    bool FindNextToken(const string& in);
    string GetToken(const string& in);
};


class SavedLevel {
    void SetValue(const string &in key, const string &in value);
    const string& GetValue(const string &in key);
    void SetArrayValue(const string &in key, const int32 index, const string &in value);
    void DeleteArrayValue(const string &in key, const int32 index);
    void AppendArrayValueIfUnique(const string &in key, const string &in val);
    void AppendArrayValue(const string &in key, const string &in val);
    uint32 GetArraySize(const string &in key);
    string GetArrayValue(const string &in key, const int32 index);
    array<string>@ GetArray(const string &in key);
    void SetInt32Value(const string &in key, const int32 value);
    int32 GetInt32Value(const string &in key);
    bool HasInt32Value(const string &in key);
    void SetKey(const string &in modsource_id, const string &in campaign_name, const string &in level_name);
};
class SaveFile {
    SavedLevel& GetSavedLevel(const string &in name);
    SavedLevel& GetSave(const string campaign_id, const string save_category, const string save_name);
    bool SaveExist(const string modsource_id, const string save_category, const string save_name);
    bool WriteInPlace();
    void QueueWriteInPlace();
    uint GetLoadedVersion();
};

